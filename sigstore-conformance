#!/usr/bin/env python3

import argparse
import logging
import os
import pathlib
from test.functional import basic

import docker

# TODO(alex): Make these enums
SIGSTORE_CLIENTS = ["sigstore-python", "cosign"]

RELEASE_TYPES = [
    "stable",
    "nightly",
]

FUNCTIONAL_TESTS = [basic]

logger = logging.getLogger(__name__)
logging.basicConfig(
    level=os.environ.get("SIGSTORE_CONFORMANCE_LOGLEVEL", "INFO").upper()
)


def _parser() -> argparse.ArgumentParser:
    parser = argparse.ArgumentParser(
        prog="sigstore-conformance",
        description="",
        formatter_class=argparse.ArgumentDefaultsHelpFormatter,
    )

    subcommands = parser.add_subparsers(required=True, dest="subcommand")

    # `sigstore-conformance build`
    subcommands.add_parser(
        "build", formatter_class=argparse.ArgumentDefaultsHelpFormatter
    )

    # `sigstore-conformance test`
    subcommands.add_parser(
        "test", formatter_class=argparse.ArgumentDefaultsHelpFormatter
    )

    # TODO(alex): These shouldn't be required
    parser.add_argument(
        "--client", "-c", type=str, choices=SIGSTORE_CLIENTS, required=True
    )
    parser.add_argument(
        "--release", "-r", type=str, choices=RELEASE_TYPES, required=True
    )

    return parser


def _build(path: pathlib.Path, tag: str) -> None:
    client = docker.from_env()

    logger.info(f"Building Docker image: {tag}")

    # TODO(alex): Cache images
    client.images.build(path=path, tag=tag)


def _test(path: pathlib.Path, tag: str) -> None:
    client = docker.from_env()

    logger.info(f"Running test for: {tag}")

    for test in FUNCTIONAL_TESTS:
        test(client, tag)


def _main() -> None:
    parser = _parser()
    args = parser.parse_args()

    # Change current working directory to where this file is
    file_path = pathlib.Path(__file__).parent.resolve()
    os.chdir(file_path)

    image_path = os.path.join(file_path, "conformance", args.release, args.client)
    tag = f"{args.client}_{args.release}"

    if args.subcommand == "build":
        _build(image_path, tag)
    elif args.subcommand == "test":
        _test(image_path, tag)
    else:
        parser.error(f"Unknown subcommand: {args.subcommand}")


if __name__ == "__main__":
    _main()
